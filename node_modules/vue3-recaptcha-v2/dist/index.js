import { inject as g, defineComponent as b, ref as h, onBeforeMount as m, onMounted as R, openBlock as k, createElementBlock as A } from "vue";
const _ = "https://www.google.com/recaptcha/api.js", E = "https://recaptcha.net/recaptcha/api.js", w = "vue3-recaptcha-v2:options", d = "vue3-recaptcha-v2", s = typeof window > "u";
class t extends Error {
  constructor(e) {
    super(e), this.message = "[vue3-recaptcha-v2] " + e;
  }
}
const I = () => {
  const n = g(w);
  return {
    options: n,
    handleGenerateScript: (c) => {
      if (s)
        throw new t("Cannot generate script on server side");
      const a = document.getElementById(d);
      a && a.remove();
      const r = document.createElement("script"), i = n != null && n.cnDomains ? E : _, l = c ? `&hl=${c}` : "";
      r.setAttribute("id", d), r.setAttribute("src", `${i}?render=explicit${l}`), r.setAttribute("async", ""), r.setAttribute("defer", ""), r.onerror = () => {
        new t("Failed to load script");
      }, document.head.appendChild(r);
    }
  };
}, y = () => ({
  handleReset: (a) => {
    if (s)
      throw new t("reCaptcha is not available on server side");
    if (!window.grecaptcha)
      throw new t("reCaptcha is not available on window");
    window.grecaptcha.reset(a);
  },
  handleGetResponse: (a) => {
    if (s)
      throw new t("reCaptcha is not available on server side");
    if (!window.grecaptcha)
      throw new t("reCaptcha is not available on window");
    return window.grecaptcha.getResponse(a);
  },
  handleExecute: (a) => {
    if (s)
      throw new t("reCaptcha is not available on server side");
    if (!window.grecaptcha)
      throw new t("reCaptcha is not available on window");
    window.grecaptcha.execute(a);
  }
}), S = /* @__PURE__ */ b({
  __name: "Recaptcha",
  props: {
    theme: {},
    size: {},
    tabindex: {},
    language: {}
  },
  emits: ["widgetId", "loadCallback", "expiredCallback", "errorCallback"],
  setup(n, { emit: e }) {
    const c = n, a = h(null), r = h(null), { handleGenerateScript: i, options: l } = I(), u = () => {
      if (!window.grecaptcha)
        throw new t("reCAPTCHA is not loaded");
      if (!r.value)
        throw new t("element is not defined");
      window.grecaptcha.ready(() => {
        try {
          const { sitekey: o } = l, { theme: p, size: C, tabindex: f } = c;
          a.value = window.grecaptcha.render(r.value, {
            sitekey: o,
            theme: p,
            size: C,
            tabindex: f,
            callback: (v) => e("loadCallback", v),
            "expired-callback": () => e("expiredCallback"),
            "error-callback": () => e("errorCallback")
          }), e("widgetId", a.value);
        } catch (o) {
          throw new t(o.message);
        }
      });
    };
    return m(() => {
      i(c.language);
    }), R(() => {
      document.getElementById(d).onload = () => {
        u();
      };
    }), (o, p) => (k(), A("div", {
      ref_key: "reCAPTCHARef",
      ref: r
    }, null, 512));
  }
});
function G(n, e) {
  if (!e.sitekey)
    throw new t("sitekey is required");
  n.provide(w, e);
}
export {
  S as RecaptchaV2,
  G as install,
  y as useRecaptcha
};
